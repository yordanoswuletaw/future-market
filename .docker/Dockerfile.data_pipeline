# Use an official Python runtime as a parent image
FROM python:3.11-slim-bullseye

ENV WORKSPACE_ROOT=/usr/src/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_NO_INTERACTION=1 \
    POETRY_VERSION=2.1.1

RUN mkdir -p $WORKSPACE_ROOT

# Install system dependencies including cron
RUN apt-get update -y \
    && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    python3-dev \
    curl \
    cron \
    && apt-get clean

# Install Poetry using pip and clear cache
RUN pip install --no-cache-dir "poetry==$POETRY_VERSION"
RUN poetry config installer.max-workers 20

# Copy the pyproject.toml and poetry.lock files from the root directory
COPY ./pyproject.toml ./poetry.lock ./

# Install the dependencies and clear cache
RUN poetry config virtualenvs.create false && \
    poetry install --no-root --no-interaction --no-cache && \
    rm -rf ~/.cache/pypoetry/cache/ && \
    rm -rf ~/.cache/pypoetry/artifacts/

# Set the working directory
WORKDIR $WORKSPACE_ROOT

# Copy the application code
COPY ./src/data_pipeline .
COPY ./src/core ./core
COPY ./src/utils ./utils

# Copy the .env file to the container
COPY .env $WORKSPACE_ROOT/.env

# Set up cron
RUN touch /var/log/cron.log

# Create and configure cron job to run every 60 minutes (change made here)
RUN echo "*/3 * * * * root cd /usr/src/app && /usr/local/bin/python /usr/src/app/main.py >> /var/log/cron.log 2>&1" > /etc/cron.d/data-pipeline-cron && \
    chmod 0644 /etc/cron.d/data-pipeline-cron && \
    crontab /etc/cron.d/data-pipeline-cron

# Set the PYTHONPATH environment variable
ENV PYTHONPATH=/usr/src/app

# Run the command on container startup
CMD ["sh", "-c", "cron && tail -f /var/log/cron.log"]
